/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module boolean #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        input wire [5:0] alufn,
        output reg [(SIZE)-1:0] bool
    );
    logic [31:0] R_481befa5_i;
    logic [31:0] RR_481befa5_i;
    logic [31:0] M_mux_4_32_s0;
    logic [31:0] M_mux_4_32_s1;
    logic [31:0] M_mux_4_32_s2;
    logic [31:0] M_mux_4_32_s3;
    logic [31:0][5:0] M_mux_4_32_in;
    logic [31:0] M_mux_4_32_out;
    
    genvar idx_0_2047108551;
    
    generate
        for (idx_0_2047108551 = 0; idx_0_2047108551 < 32; idx_0_2047108551 = idx_0_2047108551 + 1) begin: forLoop_idx_0_2047108551
            bool_mux mux_4_32 (
                .s0(M_mux_4_32_s0[idx_0_2047108551]),
                .s1(M_mux_4_32_s1[idx_0_2047108551]),
                .s2(M_mux_4_32_s2[idx_0_2047108551]),
                .s3(M_mux_4_32_s3[idx_0_2047108551]),
                .in(M_mux_4_32_in[idx_0_2047108551]),
                .out(M_mux_4_32_out[idx_0_2047108551])
            );
        end
    endgenerate
    
    
    logic [31:0][5:0] mux_inputs;
    always @* begin
        for (RR_481befa5_i = 0; RR_481befa5_i < SIZE; RR_481befa5_i = RR_481befa5_i + 1) begin
      R_481befa5_i = (1'h0) + RR_481befa5_i * (1'h1);
            mux_inputs[R_481befa5_i][1'h0] = a[R_481befa5_i] & b[R_481befa5_i];
            mux_inputs[R_481befa5_i][1'h1] = a[R_481befa5_i] | b[R_481befa5_i];
            mux_inputs[R_481befa5_i][2'h2] = a[R_481befa5_i] ^ b[R_481befa5_i];
            mux_inputs[R_481befa5_i][2'h3] = a[R_481befa5_i];
            mux_inputs[R_481befa5_i][3'h4] = ~(a[R_481befa5_i] | b[R_481befa5_i]);
            mux_inputs[R_481befa5_i][3'h5] = ~(a[R_481befa5_i] & b[R_481befa5_i]);
            M_mux_4_32_s0[R_481befa5_i] = alufn[1'h0];
            M_mux_4_32_s1[R_481befa5_i] = alufn[1'h1];
            M_mux_4_32_s2[R_481befa5_i] = alufn[2'h2];
            M_mux_4_32_s3[R_481befa5_i] = alufn[2'h3];
            M_mux_4_32_in[R_481befa5_i] = mux_inputs[R_481befa5_i];
            bool[R_481befa5_i] = M_mux_4_32_out[R_481befa5_i];
        end
    end
    
    
endmodule