/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg [3:0] z,
        output reg [3:0] v,
        output reg [3:0] n
    );
    localparam SIZE = 6'h20;
    logic [31:0] out_sig;
    localparam _MP_BITS_1080015862 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic M_adder_alufn;
    logic [31:0] M_adder_s;
    logic M_adder_v;
    logic M_adder_z;
    logic M_adder_n;
    
    rca #(
        .BITS(_MP_BITS_1080015862)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn(M_adder_alufn),
        .s(M_adder_s),
        .v(M_adder_v),
        .z(M_adder_z),
        .n(M_adder_n)
    );
    
    
    localparam _MP_SIZE_221182002 = 6'h20;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [5:0] M_boolean_alufn;
    logic [31:0] M_boolean_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_221182002)
    ) boolean (
        .a(M_boolean_a),
        .b(M_boolean_b),
        .alufn(M_boolean_alufn),
        .bool(M_boolean_bool)
    );
    
    
    logic [31:0] M_clamp_a;
    logic [31:0] M_clamp_b;
    logic [31:0] M_clamp_out;
    
    clamp clamp (
        .a(M_clamp_a),
        .b(M_clamp_b),
        .out(M_clamp_out)
    );
    
    
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn = alufn[1'h0];
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn = alufn;
        M_clamp_a = a;
        M_clamp_b = b;
        
        case (alufn)
            6'h0: begin
                out_sig = M_adder_s;
            end
            6'h1: begin
                out_sig = M_adder_s;
            end
            6'h3: begin
                out_sig = M_clamp_out;
            end
            6'h1a: begin
                out_sig = M_boolean_bool;
            end
            default: begin
                out_sig = 1'h0;
            end
        endcase
        out = out_sig;
    end
    
    
endmodule