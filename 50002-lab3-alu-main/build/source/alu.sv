/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    logic [4:0] R_1687037f_i;
    logic [5:0] RR_1687037f_i;
    logic [4:0] R_022bde4f_i;
    logic [5:0] RR_022bde4f_i;
    logic [31:0] muxout;
    localparam _MP_SIZE_76726397 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic [5:0] M_adder_alufn_signal;
    logic [31:0] M_adder_out;
    logic M_adder_z;
    logic M_adder_v;
    logic M_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_76726397)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn_signal(M_adder_alufn_signal),
        .out(M_adder_out),
        .z(M_adder_z),
        .v(M_adder_v),
        .n(M_adder_n)
    );
    
    
    logic M_compare_z;
    logic M_compare_v;
    logic M_compare_n;
    logic [5:0] M_compare_alufn;
    logic [31:0] M_compare_cmp;
    
    compare compare (
        .z(M_compare_z),
        .v(M_compare_v),
        .n(M_compare_n),
        .alufn(M_compare_alufn),
        .cmp(M_compare_cmp)
    );
    
    
    localparam _MP_SIZE_490838888 = 6'h20;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [5:0] M_boolean_alufn;
    logic [31:0] M_boolean_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_490838888)
    ) boolean (
        .a(M_boolean_a),
        .b(M_boolean_b),
        .alufn(M_boolean_alufn),
        .bool(M_boolean_bool)
    );
    
    
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic [5:0] M_shifter_alufn;
    logic [31:0] M_shifter_shift;
    
    compact_shifter shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .alufn(M_shifter_alufn),
        .shift(M_shifter_shift)
    );
    
    
    logic [31:0] M_multiplier_a;
    logic [31:0] M_multiplier_b;
    logic [31:0] M_multiplier_mul;
    
    multiplier multiplier (
        .a(M_multiplier_a),
        .b(M_multiplier_b),
        .mul(M_multiplier_mul)
    );
    
    
    logic [31:0] M_mux_4_s0;
    logic [31:0] M_mux_4_s1;
    logic [31:0][3:0] M_mux_4_in;
    logic [31:0] M_mux_4_out;
    
    genvar idx_0_45147466;
    
    generate
        for (idx_0_45147466 = 0; idx_0_45147466 < 32; idx_0_45147466 = idx_0_45147466 + 1) begin: forLoop_idx_0_45147466
            mux_4 mux_4 (
                .s0(M_mux_4_s0[idx_0_45147466]),
                .s1(M_mux_4_s1[idx_0_45147466]),
                .in(M_mux_4_in[idx_0_45147466]),
                .out(M_mux_4_out[idx_0_45147466])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux_2_s0;
    logic [31:0][1:0] M_mux_2_in;
    logic [31:0] M_mux_2_out;
    
    genvar idx_0_643588394;
    
    generate
        for (idx_0_643588394 = 0; idx_0_643588394 < 32; idx_0_643588394 = idx_0_643588394 + 1) begin: forLoop_idx_0_643588394
            mux_2 mux_2 (
                .s0(M_mux_2_s0[idx_0_643588394]),
                .in(M_mux_2_in[idx_0_643588394]),
                .out(M_mux_2_out[idx_0_643588394])
            );
        end
    endgenerate
    
    
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn_signal = alufn;
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
        M_compare_z = M_adder_z;
        M_compare_v = M_adder_v;
        M_compare_n = M_adder_n;
        M_compare_alufn = alufn;
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn = alufn;
        M_shifter_a = a;
        M_shifter_b = b[3'h4:1'h0];
        M_shifter_alufn = alufn;
        M_multiplier_a = a;
        M_multiplier_b = b;
        for (RR_1687037f_i = 0; RR_1687037f_i < 6'h20; RR_1687037f_i = RR_1687037f_i + 1) begin
      R_1687037f_i = (1'h0) + RR_1687037f_i * (1'h1);
            M_mux_2_in[R_1687037f_i][1'h0] = M_adder_out[R_1687037f_i];
            M_mux_2_in[R_1687037f_i][1'h1] = M_multiplier_mul[R_1687037f_i];
            M_mux_2_s0[R_1687037f_i] = alufn[1'h1];
            muxout[R_1687037f_i] = M_mux_2_out[R_1687037f_i];
        end
        for (RR_022bde4f_i = 0; RR_022bde4f_i < 6'h20; RR_022bde4f_i = RR_022bde4f_i + 1) begin
      R_022bde4f_i = (1'h0) + RR_022bde4f_i * (1'h1);
            M_mux_4_in[R_022bde4f_i][1'h0] = muxout[R_022bde4f_i];
            M_mux_4_in[R_022bde4f_i][1'h1] = M_boolean_bool[R_022bde4f_i];
            M_mux_4_in[R_022bde4f_i][2'h2] = M_shifter_shift[R_022bde4f_i];
            M_mux_4_in[R_022bde4f_i][2'h3] = M_compare_cmp[R_022bde4f_i];
            M_mux_4_s0[R_022bde4f_i] = alufn[3'h4];
            M_mux_4_s1[R_022bde4f_i] = alufn[3'h5];
            out[R_022bde4f_i] = M_mux_4_out[R_022bde4f_i];
        end
    end
    
    
endmodule