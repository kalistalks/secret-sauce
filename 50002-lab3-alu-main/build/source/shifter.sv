/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire pad,
        output reg [31:0] shift
    );
    logic [1:0] R_2b11285a_i;
    logic [2:0] RR_2b11285a_i;
    localparam logic [4:0][4:0] _MP_SHIFT_2011827747 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_shiftmux_a;
    logic [4:0] M_shiftmux_shift;
    logic [4:0] M_shiftmux_pad;
    logic [4:0][31:0] M_shiftmux_out;
    
    genvar idx_0_2011827747;
    
    generate
        for (idx_0_2011827747 = 0; idx_0_2011827747 < 5; idx_0_2011827747 = idx_0_2011827747 + 1) begin: forLoop_idx_0_2011827747
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_2011827747[idx_0_2011827747])
            ) shiftmux (
                .a(M_shiftmux_a[idx_0_2011827747]),
                .shift(M_shiftmux_shift[idx_0_2011827747]),
                .pad(M_shiftmux_pad[idx_0_2011827747]),
                .out(M_shiftmux_out[idx_0_2011827747])
            );
        end
    endgenerate
    
    
    always @* begin
        M_shiftmux_a[3'h4] = a;
        M_shiftmux_shift[3'h4] = b[3'h4];
        M_shiftmux_pad[3'h4] = pad;
        for (RR_2b11285a_i = 0; RR_2b11285a_i < 3'h4; RR_2b11285a_i = RR_2b11285a_i + 1) begin
      R_2b11285a_i = (1'h0) + RR_2b11285a_i * (1'h1);
            M_shiftmux_a[2'h3 - R_2b11285a_i] = M_shiftmux_out[3'h4 - R_2b11285a_i];
            M_shiftmux_shift[2'h3 - R_2b11285a_i] = b[2'h3 - R_2b11285a_i];
            M_shiftmux_pad[2'h3 - R_2b11285a_i] = pad;
        end
        shift = M_shiftmux_out[1'h0];
    end
    
    
endmodule