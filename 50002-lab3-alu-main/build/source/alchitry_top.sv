/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam logic [4:0][0:0] _MP_RISE_1658937928 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_1658937928 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_1658937928;
    
    generate
        for (idx_0_1658937928 = 0; idx_0_1658937928 < 5; idx_0_1658937928 = idx_0_1658937928 + 1) begin: forLoop_idx_0_1658937928
            edge_detector #(
                .RISE(_MP_RISE_1658937928[idx_0_1658937928]),
                .FALL(_MP_FALL_1658937928[idx_0_1658937928])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_1658937928]),
                .out(M_io_button_edge_out[idx_0_1658937928])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_176134056 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_176134056 = 5'h14;
    localparam _MP_NUM_SYNC_176134056 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_176134056;
    
    generate
        for (idx_0_176134056 = 0; idx_0_176134056 < 5; idx_0_176134056 = idx_0_176134056 + 1) begin: forLoop_idx_0_176134056
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_176134056[idx_0_176134056]),
                .MIN_DELAY(_MP_MIN_DELAY_176134056),
                .NUM_SYNC(_MP_NUM_SYNC_176134056)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_176134056]),
                .out(M_io_button_cond_out[idx_0_176134056])
            );
        end
    endgenerate
    
    
    localparam _MP_STAGES_1363886735 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1363886735)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    logic [0:0] D_state_d, D_state_q = 1'h1;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam _MP_CLK_FREQ_1469550099 = 27'h5f5e100;
    logic [7:0] M_alu_auto_led;
    logic [2:0][7:0] M_alu_auto_io_led;
    logic [7:0] M_alu_auto_io_segment;
    logic [3:0] M_alu_auto_io_select;
    
    alu_auto_tester #(
        .CLK_FREQ(_MP_CLK_FREQ_1469550099)
    ) alu_auto (
        .clk(clk),
        .rst(rst),
        .io_button(io_button),
        .io_dip(io_dip),
        .led(M_alu_auto_led),
        .io_led(M_alu_auto_io_led),
        .io_segment(M_alu_auto_io_segment),
        .io_select(M_alu_auto_io_select)
    );
    
    
    localparam _MP_CLK_FREQ_1598824979 = 27'h5f5e100;
    logic [7:0] M_alu_manual_led;
    logic [2:0][7:0] M_alu_manual_io_led;
    logic [7:0] M_alu_manual_io_segment;
    logic [3:0] M_alu_manual_io_select;
    
    alu_manual_tester #(
        .CLK_FREQ(_MP_CLK_FREQ_1598824979)
    ) alu_manual (
        .clk(clk),
        .rst(rst),
        .io_button(io_button),
        .io_dip(io_dip),
        .led(M_alu_manual_led),
        .io_led(M_alu_manual_io_led),
        .io_segment(M_alu_manual_io_segment),
        .io_select(M_alu_manual_io_select)
    );
    
    
    always @* begin
        D_state_d = D_state_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_state_d = D_state_q;
        if (D_state_q) begin
            io_segment = M_alu_manual_io_segment;
            io_select = M_alu_manual_io_select;
            io_led = M_alu_manual_io_led;
            led = M_alu_manual_led;
            if (M_io_button_edge_out[2'h3]) begin
                D_state_d = 1'h0;
            end
        end else begin
            io_segment = M_alu_auto_io_segment;
            io_select = M_alu_auto_io_select;
            io_led = M_alu_auto_io_led;
            led = M_alu_auto_led;
            if (M_io_button_edge_out[2'h3]) begin
                D_state_d = 1'h1;
            end
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_state_q <= 1'h1;
        end else begin
            D_state_q <= D_state_d;
        end
    end
endmodule