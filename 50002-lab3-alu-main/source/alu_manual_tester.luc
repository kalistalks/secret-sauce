module alu_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0
)(
    input clk,  // clock
    input rst, // reset
    input io_button[5], // 5 buttons on IO Shield
    input io_dip[3][8], // DIP switches on IO Shield
    output led[8], // 8 user controllable LEDs
    output io_led[3][8], // LEDs on IO Shield
    output io_segment[8], // 7-Segment LEDs on IO Shield
    output io_select[4] // Digit Select on IO Shield
) {
    alu alu
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 6 for sim, 16 on hardware
    enum States {
        IDLE,
        A1, // enter in back 16 bits of a
        A2, // enter in front 16 bits of a
        B1, // enter in back 16 bits of b
        B2, // enter in front 16 bits of b
        CALC // display output of ALU
    }
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        
        // instantiate 5 edge detectors, one for each button 
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        // instantiate 5 conditioners, one for each button
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{1000}})) 
        
        
        .rst(rst) {
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            dff states[$width(States)](#INIT(States.IDLE))
            dff a[32](#INIT(0))
            dff b[32](#INIT(0))
            dff state_counter[3](#INIT(1))
        }
    }
    
    
    always {
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        // connect state dff
        states.d = states.q
        a.d = a.q
        b.d = b.q
        state_counter.d = state_counter.q
        
        // alu connection, initialise a and b
        alu.a = 0
        alu.b = 0
        // leftmost section of IO dip switches, from right to left
        alu.alufn = 0
        
        // 7 segment display value
        decimal_renderer.value = state_counter.q
        seg.values = decimal_renderer.digits
        io_segment = ~seg.seg
        
        // 4 sections of 7 segment leds
        io_select = ~seg.sel
        
        // implement alu tester logic here
        led = 8h0
        io_led = 3x{{8h0}}
        
        case (states.q){
            States.IDLE:
                // this takes precedence, placed as the first clause
                // leds above dip switches
                led = 8h0
                io_led = 3x{{8h0}}
                
                state_counter.d = 1
                if (io_button_edge.out[0]) {
                    states.d = States.A1
                } else if(io_button_edge.out[2]) {
                    states.d = States.B1
                } else if(io_button_edge.out[4]) {
                    states.d = States.CALC
                }
            States.A1:
                state_counter.d = 2
                a.d[7:0] = io_dip[0] // Read back 8 bits
                a.d[15:8] = io_dip[1] // Read front 8 bits
                
                // display 32 bits of a
                led = a.q[7:0]
                io_led[0] = a.q[15:8]
                io_led[1] = a.q[23:16]
                io_led[2] = a.q[31:24]
                if (io_button_edge.out[1]) {
                    states.d = States.A2 // Move to States.A2
                }
            States.A2:
                state_counter.d = 3
                a.d[23:16] = io_dip[0] // Read back 8 bits
                a.d[31:24] = io_dip[1] // Read front 8 bits
                
                // display 32 bits of a
                led = a.q[7:0]
                io_led[0] = a.q[15:8]
                io_led[1] = a.q[23:16]
                io_led[2] = a.q[31:24]
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.IDLE
                }
            States.B1:
                state_counter.d = 4
                b.d[7:0] = io_dip[0] // Read back 8 bits
                b.d[15:8] = io_dip[1] // Read front 8 bits
                
                // display 32 bits of b
                led = b.q[7:0]
                io_led[0] = b.q[15:8]
                io_led[1] = b.q[23:16]
                io_led[2] = b.q[31:24]
                if (io_button_edge.out[1]) {
                    states.d = States.B2  // Move to States.B2
                }
            States.B2:
                state_counter.d = 5
                b.d[23:16] = io_dip[0] // Read back 8 bits
                b.d[31:24] = io_dip[1] // Read front 8 bits
                
                // display 32 bits of b
                led = b.q[7:0]
                io_led[0] = b.q[15:8]
                io_led[1] = b.q[23:16]
                io_led[2] = b.q[31:24]
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.IDLE
                }
            States.CALC:
                state_counter.d = 6
                // alu connection, initialise a and b
                alu.a = a.q
                alu.b = b.q
                // leftmost section of IO dip switches, from right to left
                alu.alufn = io_dip[2][5:0]
                
                led = alu.out[7:0] // first 8 bits
                io_led[0] = alu.out[15:8] //next 8 bits
                io_led[1] = alu.out[23:16] //next 8 bits
                io_led[2] = alu.out[31:24] // final 8 bits
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.IDLE
                }
        }
    }
}