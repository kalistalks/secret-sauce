module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{100000000}})) 
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            dff state[1](#INIT(1))
        }
    }
    const CLK_FREQ = $is_sim() ? 1000 : 100000000 // put 1000 for sim, 100MHz otherwise in hardware
    
    alu_auto_tester alu_auto(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ))
    alu_manual_tester alu_manual(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ))
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        usb_tx = usb_rx          // loop serial port
        
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        state.d = state.q
        
        // to test ALU 
        //io_segment = alu_manual.io_segment
        //io_select = alu_manual.io_select     
        //io_led = alu_manual.io_led
        //led = alu_manual.led
        
        // Toggle between manual and auto
        if (state.q) {
            io_segment = alu_manual.io_segment
            io_select  = alu_manual.io_select
            io_led     = alu_manual.io_led
            led        = alu_manual.led
            if (io_button_edge.out[3]) {
                state.d = 0
            }
        } else {
            io_segment = alu_auto.io_segment
            io_select  = alu_auto.io_select
            io_led     = alu_auto.io_led
            led        = alu_auto.led
            if (io_button_edge.out[3]) {
                state.d = 1
            }
        }
        
    }
}
