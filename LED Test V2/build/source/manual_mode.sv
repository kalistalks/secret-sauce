/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module manual_mode #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400
    ) (
        input wire clk,
        input wire rst,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg data
    );
    logic [0:0] R_74266895_index;
    logic [1:0] RR_74266895_index;
    localparam logic [3:0][23:0] COLOR_ENCODING = {{24'hffffff, 24'hff0000, 24'hff00, 24'hff}};
    localparam ENCODING_AMOUNT = 5'h4;
    logic [(BUFFER_SIZE)-1:0] pixel_address;
    logic [1:0] current_pixel_color_encoding;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam _MP_CLK_FREQ_1605471643 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1605471643 = 5'h14;
    localparam _MP_NUM_SYNC_1605471643 = 2'h2;
    logic M_latch_button_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1605471643),
        .MIN_DELAY(_MP_MIN_DELAY_1605471643),
        .NUM_SYNC(_MP_NUM_SYNC_1605471643)
    ) latch_button (
        .in(io_button[1'h0]),
        .clk(clk),
        .out(M_latch_button_out)
    );
    
    
    localparam _MP_RISE_162055892 = 1'h1;
    localparam _MP_FALL_162055892 = 1'h0;
    logic M_latch_button_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_162055892),
        .FALL(_MP_FALL_162055892)
    ) latch_button_edge (
        .in(M_latch_button_out),
        .clk(clk),
        .out(M_latch_button_edge_out)
    );
    
    
    localparam _MP_CLK_FREQ_709927446 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_709927446 = 5'h14;
    localparam _MP_NUM_SYNC_709927446 = 2'h2;
    logic M_clear_button_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_709927446),
        .MIN_DELAY(_MP_MIN_DELAY_709927446),
        .NUM_SYNC(_MP_NUM_SYNC_709927446)
    ) clear_button (
        .in(io_button[1'h1]),
        .clk(clk),
        .out(M_clear_button_out)
    );
    
    
    localparam _MP_RISE_340312309 = 1'h1;
    localparam _MP_FALL_340312309 = 1'h0;
    logic M_clear_button_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_340312309),
        .FALL(_MP_FALL_340312309)
    ) clear_button_edge (
        .in(M_clear_button_out),
        .clk(clk),
        .out(M_clear_button_edge_out)
    );
    
    
    logic D_on_off_toggle_d, D_on_off_toggle_q = 0;
    logic [(BUFFER_SIZE)-1:0] D_led_encoding_d, D_led_encoding_q = 2'h2;
    localparam _MP_PIXEL_COUNT_2067118382 = PIXEL_COUNT;
    logic M_driver_update;
    logic [23:0] M_driver_color;
    logic M_driver_clear;
    logic [($clog2(_MP_PIXEL_COUNT_2067118382))-1:0] M_driver_pixel_address;
    logic M_driver_data;
    logic M_driver_next_pixel;
    logic M_driver_reset;
    logic M_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_2067118382)
    ) driver (
        .rst(rst),
        .clk(clk),
        .update(M_driver_update),
        .color(M_driver_color),
        .clear(M_driver_clear),
        .pixel_address(M_driver_pixel_address),
        .data(M_driver_data),
        .next_pixel(M_driver_next_pixel),
        .reset(M_driver_reset),
        .done(M_driver_done)
    );
    
    
    always @* begin
        D_led_encoding_d = D_led_encoding_q;
        D_on_off_toggle_d = D_on_off_toggle_q;
        
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        data = 1'h0;
        D_led_encoding_d = D_led_encoding_q;
        D_on_off_toggle_d = D_on_off_toggle_q;
        M_driver_update = D_on_off_toggle_q;
        M_driver_clear = 1'h0;
        if (M_latch_button_edge_out) begin
            D_led_encoding_d = {ROW_DIMENSION{{io_dip[1'h1], io_dip[1'h1], io_dip[1'h0], io_dip[1'h0]}}};
        end
        if (M_clear_button_edge_out) begin
            M_driver_clear = 1'h1;
            D_on_off_toggle_d = ~D_on_off_toggle_q;
        end
        pixel_address = M_driver_pixel_address;
        for (RR_74266895_index = 0; RR_74266895_index < 2'h2; RR_74266895_index = RR_74266895_index + 1) begin
      R_74266895_index = (0) + RR_74266895_index * (1);
            current_pixel_color_encoding[R_74266895_index] = D_led_encoding_q[2'h2 * pixel_address + R_74266895_index];
        end
        M_driver_color = COLOR_ENCODING[current_pixel_color_encoding];
        data = M_driver_data;
        io_led[1'h0] = D_led_encoding_q[3'h7:1'h0];
        io_led[1'h1] = D_led_encoding_q[4'hf:4'h8];
        io_led[2'h2] = D_led_encoding_q[5'h17:5'h10];
        led[3'h7] = D_on_off_toggle_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_on_off_toggle_q <= 0;
            D_led_encoding_q <= 2'h2;
        end else begin
            D_on_off_toggle_q <= D_on_off_toggle_d;
            D_led_encoding_q <= D_led_encoding_d;
        end
    end
endmodule