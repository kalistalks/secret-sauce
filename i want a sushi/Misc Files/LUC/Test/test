// LANE 2
GameStates.CHECK_LANE_2_DIRECTION:
    // get direction of sushi travel and store into temp register
    alufn = b110011    // CMP/EQ with 2 which represents blue
    regfile_ra1 = d5    // R6 = lane_2_color
    bsel = b011    // constant 2
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d15    // R15 = temp reg
    game_fsm.d = GameStates.BRANCH_LANE_2_DIRECTION
GameStates.BRANCH_LANE_2_DIRECTION:
    regfile_ra2 = d15    // R15 = temp reg
    if (regfile_rd2[0]){    // if R6 == 2 then direction is towards the blue side (lane_2_sushi + 1)
        game_fsm.d = GameStates.UPDATE_LANE_2_SUSHI_POS_P1
    }
    else {
        // if R6 == 2 then the direction is in the red side (lane_2_sushi - 1)
        game_fsm.d = GameStates.UPDATE_LANE_2_SUSHI_POS_P2
    }
GameStates.UPDATE_LANE_2_SUSHI_POS_P1:
    // if lane direction = blue
    // lane_2_sushi (R10) + 1
    alufn = b000000    // ADD
    regfile_ra1 = d10    // R10 = lane_2_sushi
    bsel = b001    // constant 1
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d10    // R10 = lane_2_sushi
    game_fsm.d = GameStates.CHECK_LANE_2_SUSHI_END_P1
GameStates.CHECK_LANE_2_SUSHI_END_P1:
    // if (lane_2_sushi == 8) then p1_score + 1
    // else check lane 3
    alufn = b110011    // CMPEQ
    regfile_ra1 = d10    // R10 = lane_2_sushi
    bsel = b101    // constant 8
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d15    // R15 = temp reg
    game_fsm.d = GameStates.BRANCH_LANE_2_SUSHI_END_P1
GameStates.BRANCH_LANE_2_SUSHI_END_P1:
    // if (lane_2_sushi == 8) then p1_score + 1
    regfile_ra2 = d15    // R15 = temp reg
    if (regfile_rd2[0]){
        game_fsm.d = GameStates.UPDATE_LANE_2_POINTS_P1
    }
    else {
        // else check lane 3
        // game_fsm.d = GameStates.CHECK_LANE_3_DIRECTION
        game_fsm.d = GameStates.IDLE_GAME
    }
GameStates.UPDATE_LANE_2_POINTS_P1:
    // p1_score + 1
    alufn = b000000    // ADD
    regfile_ra1 = d0    // R0 = p1_score
    bsel = b001    // constant 1
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d0    // R0 = p1_score
    game_fsm.d = GameStates.SPAWN_LANE_2_SUSHI
GameStates.UPDATE_LANE_2_SUSHI_POS_P2:
    // else lane direction = red
    // lane_2_sushi (R10) - 1
    alufn = b000001    // SUB
    regfile_ra1 = d10    // R10 = lane_2_sushi
    bsel = b001    // constant 1
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d10    // R10 = lane_2_sushi
    game_fsm.d = GameStates.CHECK_LANE_2_SUSHI_END_P2
GameStates.CHECK_LANE_2_SUSHI_END_P2:
    // if (lane_2_sushi == 0) then p2_score + 1
    // else check lane 3
    alufn = b110011    // CMPEQ
    regfile_ra1 = d10    // R10 = lane_2_sushi
    bsel = b100    // constant 0
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d15    // R15 = temp reg
    game_fsm.d = GameStates.BRANCH_LANE_2_SUSHI_END_P2
GameStates.BRANCH_LANE_2_SUSHI_END_P2:
    // if (lane_2_sushi == 0) then p2_score + 1
    regfile_ra2 = d15
    if (regfile_rd2[0]){
        game_fsm.d = GameStates.UPDATE_LANE_2_POINTS_P2
    }
    else {
        // else check lane 3
        // game_fsm.d = GameStates.CHECK_LANE_3_DIRECTION
        game_fsm.d = GameStates.IDLE_GAME
    }
GameStates.UPDATE_LANE_2_POINTS_P2:
    // p2_points + 1
    alufn = b000000    // ADD
    regfile_ra1 = d1    // R1 = p2_score
    bsel = b001    // constant 1
    asel = b00    // pass through ra1 regfile
    regfile_we = 1    // write_enable 1
    regfile_wa = d1    // R1 = p2_score
    game_fsm.d = GameStates.SPAWN_LANE_2_SUSHI
GameStates.SPAWN_LANE_2_SUSHI:
    // spawn sushi in the middle (Index 4)
    alufn = b000000    // ADD
    bsel = b111    // constant 4
    asel = b10    // constant 0
    regfile_we = 1    // write_enable 1
    regfile_wa = d10    // R10 = lane_2_sushi
    game_fsm.d = GameStates.IDLE_GAME