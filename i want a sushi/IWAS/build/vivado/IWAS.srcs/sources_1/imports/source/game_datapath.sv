/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_datapath #(
        parameter SLOW_CLOCK_DIV = 5'h1a,
        parameter FAST_CLOCK_DIV = 5'h15
    ) (
        input wire p1_button_left,
        input wire p1_button_right,
        input wire p1_button_flip,
        input wire p2_button_left,
        input wire p2_button_right,
        input wire p2_button_flip,
        input wire clk,
        input wire rst,
        output reg [31:0] p1_score_out,
        output reg [31:0] p2_score_out,
        output reg [31:0] timer_out,
        output reg [31:0] p1_chef_out,
        output reg [31:0] p2_chef_out,
        output reg [31:0] lane_1_color_out,
        output reg [31:0] lane_2_color_out,
        output reg [31:0] lane_3_color_out,
        output reg [31:0] lane_4_color_out,
        output reg [31:0] lane_1_sushi_out,
        output reg [31:0] lane_2_sushi_out,
        output reg [31:0] lane_3_sushi_out,
        output reg [31:0] lane_4_sushi_out,
        output reg [3:0] debug_general
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [31:0] M_game_alu_a;
    logic [31:0] M_game_alu_b;
    logic [6:0] M_game_alu_alufn;
    logic [31:0] M_game_alu_out;
    logic M_game_alu_z;
    logic M_game_alu_v;
    logic M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn(M_game_alu_alufn),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    localparam _MP_SIZE_787656610 = 1'h1;
    localparam _MP_DIV_787656610 = SLOW_CLOCK_DIV;
    localparam _MP_TOP_787656610 = 1'h0;
    localparam _MP_UP_787656610 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_787656610),
        .DIV(_MP_DIV_787656610),
        .TOP(_MP_TOP_787656610),
        .UP(_MP_UP_787656610)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_RISE_393084896 = 1'h1;
    localparam _MP_FALL_393084896 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_393084896),
        .FALL(_MP_FALL_393084896)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    logic [31:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn;
    logic [2:0] M_game_cu_asel;
    logic [2:0] M_game_cu_bsel;
    logic [1:0] M_game_cu_alu_out_sel;
    logic [3:0] M_game_cu_regfile_wa;
    logic [3:0] M_game_cu_regfile_ra1;
    logic [3:0] M_game_cu_regfile_ra2;
    logic M_game_cu_regfile_we;
    logic [3:0] M_game_cu_debug;
    
    game_cu game_cu (
        .p1_button_left(p1_button_left),
        .p1_button_right(p1_button_right),
        .p1_button_flip(p1_button_flip),
        .p2_button_left(p2_button_left),
        .p2_button_right(p2_button_right),
        .p2_button_flip(p2_button_flip),
        .rst(rst),
        .decrease_timer(M_edge_detector_game_timer_out),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn(M_game_cu_alufn),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .alu_out_sel(M_game_cu_alu_out_sel),
        .regfile_wa(M_game_cu_regfile_wa),
        .regfile_ra1(M_game_cu_regfile_ra1),
        .regfile_ra2(M_game_cu_regfile_ra2),
        .regfile_we(M_game_cu_regfile_we),
        .debug(M_game_cu_debug)
    );
    
    
    logic [31:0] M_game_regfiles_data;
    logic [31:0] M_game_regfiles_rd1;
    logic [31:0] M_game_regfiles_rd2;
    logic [31:0] M_game_regfiles_p1_score_out;
    logic [31:0] M_game_regfiles_p2_score_out;
    logic [31:0] M_game_regfiles_timer_out;
    logic [31:0] M_game_regfiles_p1_chef_out;
    logic [31:0] M_game_regfiles_p2_chef_out;
    logic [31:0] M_game_regfiles_lane_1_color_out;
    logic [31:0] M_game_regfiles_lane_2_color_out;
    logic [31:0] M_game_regfiles_lane_3_color_out;
    logic [31:0] M_game_regfiles_lane_4_color_out;
    logic [31:0] M_game_regfiles_lane_1_sushi_out;
    logic [31:0] M_game_regfiles_lane_2_sushi_out;
    logic [31:0] M_game_regfiles_lane_3_sushi_out;
    logic [31:0] M_game_regfiles_lane_4_sushi_out;
    
    game_regfiles game_regfiles (
        .we(M_game_cu_regfile_we),
        .wa(M_game_cu_regfile_wa),
        .ra1(M_game_cu_regfile_ra1),
        .ra2(M_game_cu_regfile_ra2),
        .rst(rst),
        .clk(clk),
        .data(M_game_regfiles_data),
        .rd1(M_game_regfiles_rd1),
        .rd2(M_game_regfiles_rd2),
        .p1_score_out(M_game_regfiles_p1_score_out),
        .p2_score_out(M_game_regfiles_p2_score_out),
        .timer_out(M_game_regfiles_timer_out),
        .p1_chef_out(M_game_regfiles_p1_chef_out),
        .p2_chef_out(M_game_regfiles_p2_chef_out),
        .lane_1_color_out(M_game_regfiles_lane_1_color_out),
        .lane_2_color_out(M_game_regfiles_lane_2_color_out),
        .lane_3_color_out(M_game_regfiles_lane_3_color_out),
        .lane_4_color_out(M_game_regfiles_lane_4_color_out),
        .lane_1_sushi_out(M_game_regfiles_lane_1_sushi_out),
        .lane_2_sushi_out(M_game_regfiles_lane_2_sushi_out),
        .lane_3_sushi_out(M_game_regfiles_lane_3_sushi_out),
        .lane_4_sushi_out(M_game_regfiles_lane_4_sushi_out)
    );
    
    
    always @* begin
        M_game_cu_regfile_rd2 = M_game_regfiles_rd2;
        
        case (M_game_cu_asel)
            2'h0: begin
                input_alu_a = M_game_regfiles_rd1;
            end
            2'h1: begin
                input_alu_a = 1'h1;
            end
            2'h2: begin
                input_alu_a = 1'h0;
            end
            2'h3: begin
                input_alu_a = 5'h1e;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            3'h0: begin
                input_alu_b = M_game_regfiles_rd2;
            end
            3'h1: begin
                input_alu_b = 1'h1;
            end
            3'h2: begin
                input_alu_b = -2'sh1;
            end
            3'h3: begin
                input_alu_b = 2'h2;
            end
            3'h4: begin
                input_alu_b = 1'h0;
            end
            3'h5: begin
                input_alu_b = 4'h8;
            end
            3'h6: begin
                input_alu_b = 2'h3;
            end
            3'h7: begin
                input_alu_b = 3'h4;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn = M_game_cu_alufn;
        
        case (M_game_cu_alu_out_sel)
            2'h1: begin
                M_game_regfiles_data = 16'hffff;
            end
            2'h2: begin
                M_game_regfiles_data = 4'hf;
            end
            2'h3: begin
                M_game_regfiles_data = 1'h0;
            end
            default: begin
                M_game_regfiles_data = M_game_alu_out;
            end
        endcase
        p1_score_out = M_game_regfiles_p1_score_out;
        p2_score_out = M_game_regfiles_p2_score_out;
        timer_out = M_game_regfiles_timer_out;
        p1_chef_out = M_game_regfiles_p1_chef_out;
        p2_chef_out = M_game_regfiles_p2_chef_out;
        lane_1_color_out = M_game_regfiles_lane_1_color_out;
        lane_2_color_out = M_game_regfiles_lane_2_color_out;
        lane_3_color_out = M_game_regfiles_lane_3_color_out;
        lane_4_color_out = M_game_regfiles_lane_4_color_out;
        lane_1_sushi_out = M_game_regfiles_lane_1_sushi_out;
        lane_2_sushi_out = M_game_regfiles_lane_2_sushi_out;
        lane_3_sushi_out = M_game_regfiles_lane_3_sushi_out;
        lane_4_sushi_out = M_game_regfiles_lane_4_sushi_out;
        debug_general = M_game_cu_debug;
    end
    
    
endmodule