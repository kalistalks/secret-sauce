/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        input wire p1_button_left,
        input wire p1_button_right,
        input wire p1_button_flip,
        input wire p2_button_left,
        input wire p2_button_right,
        input wire p2_button_flip,
        output reg p1_chef_data,
        output reg p2_chef_data,
        output reg lane_1_sushi_data,
        output reg lane_2_sushi_data,
        output reg lane_3_sushi_data,
        output reg lane_4_sushi_data,
        output reg lane_1_color_data,
        output reg lane_2_color_data,
        output reg lane_3_color_data,
        output reg lane_4_color_data
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam SLOW_CLOCK_DIV = 5'h1a;
    localparam FAST_CLOCK_DIV = 5'h15;
    localparam SUSHI_PIXEL_COUNT = 5'h15;
    localparam CHEF_PIXEL_COUNT = 4'hc;
    localparam logic [3:0][23:0] COLOR_ENCODING = {{24'h10101, 24'h10000, 24'h100, 24'h0}};
    localparam CLEAR = 1'h0;
    localparam UPDATE = 1'h1;
    localparam _MP_STAGES_891708515 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_891708515)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_1467866353 = 1'h1;
    localparam _MP_FALL_1467866353 = 1'h0;
    logic M_edge_dt_p1_button_left_in;
    logic M_edge_dt_p1_button_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1467866353),
        .FALL(_MP_FALL_1467866353)
    ) edge_dt_p1_button_left (
        .clk(clk),
        .in(M_edge_dt_p1_button_left_in),
        .out(M_edge_dt_p1_button_left_out)
    );
    
    
    localparam _MP_RISE_1902600422 = 1'h1;
    localparam _MP_FALL_1902600422 = 1'h0;
    logic M_edge_dt_p1_button_right_in;
    logic M_edge_dt_p1_button_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1902600422),
        .FALL(_MP_FALL_1902600422)
    ) edge_dt_p1_button_right (
        .clk(clk),
        .in(M_edge_dt_p1_button_right_in),
        .out(M_edge_dt_p1_button_right_out)
    );
    
    
    localparam _MP_RISE_1512331473 = 1'h1;
    localparam _MP_FALL_1512331473 = 1'h0;
    logic M_edge_dt_p1_button_flip_in;
    logic M_edge_dt_p1_button_flip_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1512331473),
        .FALL(_MP_FALL_1512331473)
    ) edge_dt_p1_button_flip (
        .clk(clk),
        .in(M_edge_dt_p1_button_flip_in),
        .out(M_edge_dt_p1_button_flip_out)
    );
    
    
    localparam _MP_RISE_236532642 = 1'h1;
    localparam _MP_FALL_236532642 = 1'h0;
    logic M_edge_dt_p2_button_left_in;
    logic M_edge_dt_p2_button_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_236532642),
        .FALL(_MP_FALL_236532642)
    ) edge_dt_p2_button_left (
        .clk(clk),
        .in(M_edge_dt_p2_button_left_in),
        .out(M_edge_dt_p2_button_left_out)
    );
    
    
    localparam _MP_RISE_751069139 = 1'h1;
    localparam _MP_FALL_751069139 = 1'h0;
    logic M_edge_dt_p2_button_right_in;
    logic M_edge_dt_p2_button_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_751069139),
        .FALL(_MP_FALL_751069139)
    ) edge_dt_p2_button_right (
        .clk(clk),
        .in(M_edge_dt_p2_button_right_in),
        .out(M_edge_dt_p2_button_right_out)
    );
    
    
    localparam _MP_RISE_1514151546 = 1'h1;
    localparam _MP_FALL_1514151546 = 1'h0;
    logic M_edge_dt_p2_button_flip_in;
    logic M_edge_dt_p2_button_flip_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1514151546),
        .FALL(_MP_FALL_1514151546)
    ) edge_dt_p2_button_flip (
        .clk(clk),
        .in(M_edge_dt_p2_button_flip_in),
        .out(M_edge_dt_p2_button_flip_out)
    );
    
    
    localparam _MP_CLK_FREQ_1357932091 = 24'h989680;
    localparam _MP_MIN_DELAY_1357932091 = 5'h14;
    localparam _MP_NUM_SYNC_1357932091 = 2'h2;
    logic M_btn_cond_p1_button_left_in;
    logic M_btn_cond_p1_button_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1357932091),
        .MIN_DELAY(_MP_MIN_DELAY_1357932091),
        .NUM_SYNC(_MP_NUM_SYNC_1357932091)
    ) btn_cond_p1_button_left (
        .clk(clk),
        .in(M_btn_cond_p1_button_left_in),
        .out(M_btn_cond_p1_button_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_1611151284 = 24'h989680;
    localparam _MP_MIN_DELAY_1611151284 = 5'h14;
    localparam _MP_NUM_SYNC_1611151284 = 2'h2;
    logic M_btn_cond_p1_button_right_in;
    logic M_btn_cond_p1_button_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1611151284),
        .MIN_DELAY(_MP_MIN_DELAY_1611151284),
        .NUM_SYNC(_MP_NUM_SYNC_1611151284)
    ) btn_cond_p1_button_right (
        .clk(clk),
        .in(M_btn_cond_p1_button_right_in),
        .out(M_btn_cond_p1_button_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_730752528 = 24'h989680;
    localparam _MP_MIN_DELAY_730752528 = 5'h14;
    localparam _MP_NUM_SYNC_730752528 = 2'h2;
    logic M_btn_cond_p1_button_flip_in;
    logic M_btn_cond_p1_button_flip_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_730752528),
        .MIN_DELAY(_MP_MIN_DELAY_730752528),
        .NUM_SYNC(_MP_NUM_SYNC_730752528)
    ) btn_cond_p1_button_flip (
        .clk(clk),
        .in(M_btn_cond_p1_button_flip_in),
        .out(M_btn_cond_p1_button_flip_out)
    );
    
    
    localparam _MP_CLK_FREQ_816499388 = 24'h989680;
    localparam _MP_MIN_DELAY_816499388 = 5'h14;
    localparam _MP_NUM_SYNC_816499388 = 2'h2;
    logic M_btn_cond_p2_button_left_in;
    logic M_btn_cond_p2_button_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_816499388),
        .MIN_DELAY(_MP_MIN_DELAY_816499388),
        .NUM_SYNC(_MP_NUM_SYNC_816499388)
    ) btn_cond_p2_button_left (
        .clk(clk),
        .in(M_btn_cond_p2_button_left_in),
        .out(M_btn_cond_p2_button_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_1800530777 = 24'h989680;
    localparam _MP_MIN_DELAY_1800530777 = 5'h14;
    localparam _MP_NUM_SYNC_1800530777 = 2'h2;
    logic M_btn_cond_p2_button_right_in;
    logic M_btn_cond_p2_button_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1800530777),
        .MIN_DELAY(_MP_MIN_DELAY_1800530777),
        .NUM_SYNC(_MP_NUM_SYNC_1800530777)
    ) btn_cond_p2_button_right (
        .clk(clk),
        .in(M_btn_cond_p2_button_right_in),
        .out(M_btn_cond_p2_button_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_1246086160 = 24'h989680;
    localparam _MP_MIN_DELAY_1246086160 = 5'h14;
    localparam _MP_NUM_SYNC_1246086160 = 2'h2;
    logic M_btn_cond_p2_button_flip_in;
    logic M_btn_cond_p2_button_flip_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1246086160),
        .MIN_DELAY(_MP_MIN_DELAY_1246086160),
        .NUM_SYNC(_MP_NUM_SYNC_1246086160)
    ) btn_cond_p2_button_flip (
        .clk(clk),
        .in(M_btn_cond_p2_button_flip_in),
        .out(M_btn_cond_p2_button_flip_out)
    );
    
    
    localparam _MP_DIGITS_304317870 = 3'h4;
    localparam _MP_DIV_304317870 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_304317870),
        .DIV(_MP_DIV_304317870)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_SLOW_CLOCK_DIV_1951680463 = 5'h1a;
    localparam _MP_FAST_CLOCK_DIV_1951680463 = 5'h15;
    logic M_game_datapath_p1_button_left;
    logic M_game_datapath_p1_button_right;
    logic M_game_datapath_p1_button_flip;
    logic M_game_datapath_p2_button_left;
    logic M_game_datapath_p2_button_right;
    logic M_game_datapath_p2_button_flip;
    logic [31:0] M_game_datapath_p1_score_out;
    logic [31:0] M_game_datapath_p2_score_out;
    logic [31:0] M_game_datapath_timer_out;
    logic [31:0] M_game_datapath_p1_chef_out;
    logic [31:0] M_game_datapath_p2_chef_out;
    logic [31:0] M_game_datapath_lane_1_color_out;
    logic [31:0] M_game_datapath_lane_2_color_out;
    logic [31:0] M_game_datapath_lane_3_color_out;
    logic [31:0] M_game_datapath_lane_4_color_out;
    logic [31:0] M_game_datapath_lane_1_sushi_out;
    logic [31:0] M_game_datapath_lane_2_sushi_out;
    logic [31:0] M_game_datapath_lane_3_sushi_out;
    logic [31:0] M_game_datapath_lane_4_sushi_out;
    logic [3:0] M_game_datapath_debug_general;
    
    game_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_1951680463),
        .FAST_CLOCK_DIV(_MP_FAST_CLOCK_DIV_1951680463)
    ) game_datapath (
        .clk(clk),
        .rst(rst),
        .p1_button_left(M_game_datapath_p1_button_left),
        .p1_button_right(M_game_datapath_p1_button_right),
        .p1_button_flip(M_game_datapath_p1_button_flip),
        .p2_button_left(M_game_datapath_p2_button_left),
        .p2_button_right(M_game_datapath_p2_button_right),
        .p2_button_flip(M_game_datapath_p2_button_flip),
        .p1_score_out(M_game_datapath_p1_score_out),
        .p2_score_out(M_game_datapath_p2_score_out),
        .timer_out(M_game_datapath_timer_out),
        .p1_chef_out(M_game_datapath_p1_chef_out),
        .p2_chef_out(M_game_datapath_p2_chef_out),
        .lane_1_color_out(M_game_datapath_lane_1_color_out),
        .lane_2_color_out(M_game_datapath_lane_2_color_out),
        .lane_3_color_out(M_game_datapath_lane_3_color_out),
        .lane_4_color_out(M_game_datapath_lane_4_color_out),
        .lane_1_sushi_out(M_game_datapath_lane_1_sushi_out),
        .lane_2_sushi_out(M_game_datapath_lane_2_sushi_out),
        .lane_3_sushi_out(M_game_datapath_lane_3_sushi_out),
        .lane_4_sushi_out(M_game_datapath_lane_4_sushi_out),
        .debug_general(M_game_datapath_debug_general)
    );
    
    
    localparam _MP_PIXEL_COUNT_2052366878 = 4'hc;
    logic [23:0] M_p1_chef_driver_color;
    logic [3:0] M_p1_chef_driver_pixel_address;
    logic M_p1_chef_driver_data;
    logic M_p1_chef_driver_next_pixel;
    logic M_p1_chef_driver_reset;
    logic M_p1_chef_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_2052366878)
    ) p1_chef_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_p1_chef_driver_color),
        .pixel_address(M_p1_chef_driver_pixel_address),
        .data(M_p1_chef_driver_data),
        .next_pixel(M_p1_chef_driver_next_pixel),
        .reset(M_p1_chef_driver_reset),
        .done(M_p1_chef_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_1557898906 = 4'hc;
    logic [23:0] M_p2_chef_driver_color;
    logic [3:0] M_p2_chef_driver_pixel_address;
    logic M_p2_chef_driver_data;
    logic M_p2_chef_driver_next_pixel;
    logic M_p2_chef_driver_reset;
    logic M_p2_chef_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1557898906)
    ) p2_chef_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_p2_chef_driver_color),
        .pixel_address(M_p2_chef_driver_pixel_address),
        .data(M_p2_chef_driver_data),
        .next_pixel(M_p2_chef_driver_next_pixel),
        .reset(M_p2_chef_driver_reset),
        .done(M_p2_chef_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_1737564396 = 5'h15;
    logic [23:0] M_lane_1_sushi_driver_color;
    logic [4:0] M_lane_1_sushi_driver_pixel_address;
    logic M_lane_1_sushi_driver_data;
    logic M_lane_1_sushi_driver_next_pixel;
    logic M_lane_1_sushi_driver_reset;
    logic M_lane_1_sushi_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1737564396)
    ) lane_1_sushi_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_1_sushi_driver_color),
        .pixel_address(M_lane_1_sushi_driver_pixel_address),
        .data(M_lane_1_sushi_driver_data),
        .next_pixel(M_lane_1_sushi_driver_next_pixel),
        .reset(M_lane_1_sushi_driver_reset),
        .done(M_lane_1_sushi_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_833452526 = 5'h15;
    logic [23:0] M_lane_2_sushi_driver_color;
    logic [4:0] M_lane_2_sushi_driver_pixel_address;
    logic M_lane_2_sushi_driver_data;
    logic M_lane_2_sushi_driver_next_pixel;
    logic M_lane_2_sushi_driver_reset;
    logic M_lane_2_sushi_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_833452526)
    ) lane_2_sushi_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_2_sushi_driver_color),
        .pixel_address(M_lane_2_sushi_driver_pixel_address),
        .data(M_lane_2_sushi_driver_data),
        .next_pixel(M_lane_2_sushi_driver_next_pixel),
        .reset(M_lane_2_sushi_driver_reset),
        .done(M_lane_2_sushi_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_1857448343 = 5'h15;
    logic [23:0] M_lane_3_sushi_driver_color;
    logic [4:0] M_lane_3_sushi_driver_pixel_address;
    logic M_lane_3_sushi_driver_data;
    logic M_lane_3_sushi_driver_next_pixel;
    logic M_lane_3_sushi_driver_reset;
    logic M_lane_3_sushi_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1857448343)
    ) lane_3_sushi_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_3_sushi_driver_color),
        .pixel_address(M_lane_3_sushi_driver_pixel_address),
        .data(M_lane_3_sushi_driver_data),
        .next_pixel(M_lane_3_sushi_driver_next_pixel),
        .reset(M_lane_3_sushi_driver_reset),
        .done(M_lane_3_sushi_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_1868103085 = 5'h15;
    logic [23:0] M_lane_4_sushi_driver_color;
    logic [4:0] M_lane_4_sushi_driver_pixel_address;
    logic M_lane_4_sushi_driver_data;
    logic M_lane_4_sushi_driver_next_pixel;
    logic M_lane_4_sushi_driver_reset;
    logic M_lane_4_sushi_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1868103085)
    ) lane_4_sushi_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_4_sushi_driver_color),
        .pixel_address(M_lane_4_sushi_driver_pixel_address),
        .data(M_lane_4_sushi_driver_data),
        .next_pixel(M_lane_4_sushi_driver_next_pixel),
        .reset(M_lane_4_sushi_driver_reset),
        .done(M_lane_4_sushi_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_18884330 = 5'h15;
    logic [23:0] M_lane_1_color_driver_color;
    logic [4:0] M_lane_1_color_driver_pixel_address;
    logic M_lane_1_color_driver_data;
    logic M_lane_1_color_driver_next_pixel;
    logic M_lane_1_color_driver_reset;
    logic M_lane_1_color_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_18884330)
    ) lane_1_color_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_1_color_driver_color),
        .pixel_address(M_lane_1_color_driver_pixel_address),
        .data(M_lane_1_color_driver_data),
        .next_pixel(M_lane_1_color_driver_next_pixel),
        .reset(M_lane_1_color_driver_reset),
        .done(M_lane_1_color_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_1528323369 = 5'h15;
    logic [23:0] M_lane_2_color_driver_color;
    logic [4:0] M_lane_2_color_driver_pixel_address;
    logic M_lane_2_color_driver_data;
    logic M_lane_2_color_driver_next_pixel;
    logic M_lane_2_color_driver_reset;
    logic M_lane_2_color_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1528323369)
    ) lane_2_color_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_2_color_driver_color),
        .pixel_address(M_lane_2_color_driver_pixel_address),
        .data(M_lane_2_color_driver_data),
        .next_pixel(M_lane_2_color_driver_next_pixel),
        .reset(M_lane_2_color_driver_reset),
        .done(M_lane_2_color_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_104819980 = 5'h15;
    logic [23:0] M_lane_3_color_driver_color;
    logic [4:0] M_lane_3_color_driver_pixel_address;
    logic M_lane_3_color_driver_data;
    logic M_lane_3_color_driver_next_pixel;
    logic M_lane_3_color_driver_reset;
    logic M_lane_3_color_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_104819980)
    ) lane_3_color_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_3_color_driver_color),
        .pixel_address(M_lane_3_color_driver_pixel_address),
        .data(M_lane_3_color_driver_data),
        .next_pixel(M_lane_3_color_driver_next_pixel),
        .reset(M_lane_3_color_driver_reset),
        .done(M_lane_3_color_driver_done)
    );
    
    
    localparam _MP_PIXEL_COUNT_774000115 = 5'h15;
    logic [23:0] M_lane_4_color_driver_color;
    logic [4:0] M_lane_4_color_driver_pixel_address;
    logic M_lane_4_color_driver_data;
    logic M_lane_4_color_driver_next_pixel;
    logic M_lane_4_color_driver_reset;
    logic M_lane_4_color_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_774000115)
    ) lane_4_color_driver (
        .clk(clk),
        .rst(rst),
        .clear(1'h0),
        .update(1'h1),
        .color(M_lane_4_color_driver_color),
        .pixel_address(M_lane_4_color_driver_pixel_address),
        .data(M_lane_4_color_driver_data),
        .next_pixel(M_lane_4_color_driver_next_pixel),
        .reset(M_lane_4_color_driver_reset),
        .done(M_lane_4_color_driver_done)
    );
    
    
    localparam _MP_DIGITS_928897089 = 1'h1;
    localparam _MP_LEADING_ZEROS_928897089 = 1'h0;
    logic [3:0] M_p1_score_bin_to_dec_converter_value;
    logic [0:0][3:0] M_p1_score_bin_to_dec_converter_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_928897089),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_928897089)
    ) p1_score_bin_to_dec_converter (
        .value(M_p1_score_bin_to_dec_converter_value),
        .digits(M_p1_score_bin_to_dec_converter_digits)
    );
    
    
    localparam _MP_DIGITS_1578846231 = 2'h2;
    localparam _MP_LEADING_ZEROS_1578846231 = 1'h0;
    logic [6:0] M_timer_bin_to_dec_converter_value;
    logic [1:0][3:0] M_timer_bin_to_dec_converter_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1578846231),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1578846231)
    ) timer_bin_to_dec_converter (
        .value(M_timer_bin_to_dec_converter_value),
        .digits(M_timer_bin_to_dec_converter_digits)
    );
    
    
    localparam _MP_DIGITS_2005577394 = 1'h1;
    localparam _MP_LEADING_ZEROS_2005577394 = 1'h0;
    logic [3:0] M_p2_score_bin_to_dec_converter_value;
    logic [0:0][3:0] M_p2_score_bin_to_dec_converter_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_2005577394),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_2005577394)
    ) p2_score_bin_to_dec_converter (
        .value(M_p2_score_bin_to_dec_converter_value),
        .digits(M_p2_score_bin_to_dec_converter_digits)
    );
    
    
    logic [3:0] M_p1_chef_rom_pos;
    logic [11:0][1:0] M_p1_chef_rom_out;
    
    chef_rom p1_chef_rom (
        .pos(M_p1_chef_rom_pos),
        .out(M_p1_chef_rom_out)
    );
    
    
    logic [3:0] M_p2_chef_rom_pos;
    logic [11:0][1:0] M_p2_chef_rom_out;
    
    chef_rom p2_chef_rom (
        .pos(M_p2_chef_rom_pos),
        .out(M_p2_chef_rom_out)
    );
    
    
    logic [2:0] M_lane_1_color_rom_pos;
    logic [20:0][1:0] M_lane_1_color_rom_out;
    
    lane_rom lane_1_color_rom (
        .pos(M_lane_1_color_rom_pos),
        .out(M_lane_1_color_rom_out)
    );
    
    
    logic [2:0] M_lane_2_color_rom_pos;
    logic [20:0][1:0] M_lane_2_color_rom_out;
    
    lane_rom lane_2_color_rom (
        .pos(M_lane_2_color_rom_pos),
        .out(M_lane_2_color_rom_out)
    );
    
    
    logic [2:0] M_lane_3_color_rom_pos;
    logic [20:0][1:0] M_lane_3_color_rom_out;
    
    lane_rom lane_3_color_rom (
        .pos(M_lane_3_color_rom_pos),
        .out(M_lane_3_color_rom_out)
    );
    
    
    logic [2:0] M_lane_4_color_rom_pos;
    logic [20:0][1:0] M_lane_4_color_rom_out;
    
    lane_rom lane_4_color_rom (
        .pos(M_lane_4_color_rom_pos),
        .out(M_lane_4_color_rom_out)
    );
    
    
    logic [4:0] M_lane_1_sushi_rom_pos;
    logic [20:0][1:0] M_lane_1_sushi_rom_out;
    
    sushi_rom lane_1_sushi_rom (
        .pos(M_lane_1_sushi_rom_pos),
        .out(M_lane_1_sushi_rom_out)
    );
    
    
    logic [4:0] M_lane_2_sushi_rom_pos;
    logic [20:0][1:0] M_lane_2_sushi_rom_out;
    
    sushi_rom lane_2_sushi_rom (
        .pos(M_lane_2_sushi_rom_pos),
        .out(M_lane_2_sushi_rom_out)
    );
    
    
    logic [4:0] M_lane_3_sushi_rom_pos;
    logic [20:0][1:0] M_lane_3_sushi_rom_out;
    
    sushi_rom lane_3_sushi_rom (
        .pos(M_lane_3_sushi_rom_pos),
        .out(M_lane_3_sushi_rom_out)
    );
    
    
    logic [4:0] M_lane_4_sushi_rom_pos;
    logic [20:0][1:0] M_lane_4_sushi_rom_out;
    
    sushi_rom lane_4_sushi_rom (
        .pos(M_lane_4_sushi_rom_pos),
        .out(M_lane_4_sushi_rom_out)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_btn_cond_p1_button_left_in = p1_button_left;
        M_btn_cond_p1_button_right_in = p1_button_right;
        M_btn_cond_p1_button_flip_in = p1_button_flip;
        M_edge_dt_p1_button_left_in = M_btn_cond_p1_button_left_out;
        M_edge_dt_p1_button_right_in = M_btn_cond_p1_button_right_out;
        M_edge_dt_p1_button_flip_in = M_btn_cond_p1_button_flip_out;
        M_game_datapath_p1_button_left = M_edge_dt_p1_button_left_out;
        M_game_datapath_p1_button_right = M_edge_dt_p1_button_right_out;
        M_game_datapath_p1_button_flip = M_edge_dt_p1_button_flip_out;
        M_btn_cond_p2_button_left_in = p2_button_left;
        M_btn_cond_p2_button_right_in = p2_button_right;
        M_btn_cond_p2_button_flip_in = p2_button_flip;
        M_edge_dt_p2_button_left_in = M_btn_cond_p2_button_left_out;
        M_edge_dt_p2_button_right_in = M_btn_cond_p2_button_right_out;
        M_edge_dt_p2_button_flip_in = M_btn_cond_p2_button_flip_out;
        M_game_datapath_p2_button_left = M_edge_dt_p2_button_left_out;
        M_game_datapath_p2_button_right = M_edge_dt_p2_button_right_out;
        M_game_datapath_p2_button_flip = M_edge_dt_p2_button_flip_out;
        M_p1_chef_rom_pos = M_game_datapath_p1_chef_out[2'h3:1'h0];
        M_p1_chef_driver_color = COLOR_ENCODING[M_p1_chef_rom_out[(3'h4)'(M_p1_chef_driver_pixel_address)]];
        p1_chef_data = M_p1_chef_driver_data;
        M_p2_chef_rom_pos = M_game_datapath_p2_chef_out[2'h3:1'h0];
        M_p2_chef_driver_color = COLOR_ENCODING[M_p2_chef_rom_out[(3'h4)'(M_p2_chef_driver_pixel_address)]];
        p2_chef_data = M_p2_chef_driver_data;
        M_lane_1_color_rom_pos = M_game_datapath_lane_1_color_out[2'h2:1'h0];
        M_lane_1_color_driver_color = COLOR_ENCODING[M_lane_1_color_rom_out[(3'h5)'(M_lane_1_color_driver_pixel_address)]];
        lane_1_color_data = M_lane_1_color_driver_data;
        M_lane_2_color_rom_pos = M_game_datapath_lane_2_color_out[2'h2:1'h0];
        M_lane_2_color_driver_color = COLOR_ENCODING[M_lane_2_color_rom_out[(3'h5)'(M_lane_2_color_driver_pixel_address)]];
        lane_2_color_data = M_lane_2_color_driver_data;
        M_lane_3_color_rom_pos = M_game_datapath_lane_3_color_out[2'h2:1'h0];
        M_lane_3_color_driver_color = COLOR_ENCODING[M_lane_3_color_rom_out[(3'h5)'(M_lane_3_color_driver_pixel_address)]];
        lane_3_color_data = M_lane_3_color_driver_data;
        M_lane_4_color_rom_pos = M_game_datapath_lane_4_color_out[2'h2:1'h0];
        M_lane_4_color_driver_color = COLOR_ENCODING[M_lane_4_color_rom_out[(3'h5)'(M_lane_4_color_driver_pixel_address)]];
        lane_4_color_data = M_lane_4_color_driver_data;
        M_lane_1_sushi_rom_pos = M_game_datapath_lane_1_sushi_out[3'h4:1'h0];
        M_lane_1_sushi_driver_color = COLOR_ENCODING[M_lane_1_sushi_rom_out[(3'h5)'(M_lane_1_sushi_driver_pixel_address)]];
        lane_1_sushi_data = M_lane_1_sushi_driver_data;
        M_lane_2_sushi_rom_pos = M_game_datapath_lane_2_sushi_out[3'h4:1'h0];
        M_lane_2_sushi_driver_color = COLOR_ENCODING[M_lane_2_sushi_rom_out[(3'h5)'(M_lane_2_sushi_driver_pixel_address)]];
        lane_2_sushi_data = M_lane_2_sushi_driver_data;
        M_lane_3_sushi_rom_pos = M_game_datapath_lane_3_sushi_out[3'h4:1'h0];
        M_lane_3_sushi_driver_color = COLOR_ENCODING[M_lane_3_sushi_rom_out[(3'h5)'(M_lane_3_sushi_driver_pixel_address)]];
        lane_3_sushi_data = M_lane_3_sushi_driver_data;
        M_lane_4_sushi_rom_pos = M_game_datapath_lane_4_sushi_out[3'h4:1'h0];
        M_lane_4_sushi_driver_color = COLOR_ENCODING[M_lane_4_sushi_rom_out[(3'h5)'(M_lane_4_sushi_driver_pixel_address)]];
        lane_4_sushi_data = M_lane_4_sushi_driver_data;
        M_seg_values = {{4'h0, 4'h0, 4'h0, 4'h0}};
        M_p1_score_bin_to_dec_converter_value = M_game_datapath_p1_score_out[2'h3:1'h0];
        M_p2_score_bin_to_dec_converter_value = M_game_datapath_p2_score_out[2'h3:1'h0];
        M_timer_bin_to_dec_converter_value = M_game_datapath_timer_out[3'h6:1'h0];
        M_seg_values = {M_timer_bin_to_dec_converter_digits, M_p1_score_bin_to_dec_converter_digits, M_p2_score_bin_to_dec_converter_digits};
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
    end
    
    
endmodule