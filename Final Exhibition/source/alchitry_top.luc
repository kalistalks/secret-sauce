module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input external_reset_button, // external reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8],       // DIP switches on IO Shield
    output ext_select[6],
    input p1_button_left,
    input p1_button_right,
    input p1_button_flip,
    input p2_button_left,
    input p2_button_right,
    input p2_button_flip,
    output p1_chef_data,
    output p2_chef_data,
    output lane_1_sushi_data,
    output lane_2_sushi_data,
    output lane_3_sushi_data,
    output lane_4_sushi_data,
    output lane_1_color_data,
    output lane_2_color_data,
    output lane_3_color_data,
    output lane_4_color_data
) {
    
    sig rst                 // reset signal
    
    const CLK_FREQ = $is_sim() ? 1000 : 100000000 // put 1000 for sim, 100M for hardware 
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 for hardware
    const SLOW_CLOCK_DIV = $is_sim() ? 9 : 26 // put 9 for sim, 26 for hardware 
    const FAST_CLOCK_DIV = $is_sim() ? 7 : 21 // put 7 for sim, 21 for hardware 
    
    const SUSHI_PIXEL_COUNT = d21 // how many LEDs in total?
    
    const CHEF_PIXEL_COUNT = d12 // how many LEDs in total?
    
    const COLOR_ENCODING = {24h010101, 24h010000, 24h000100, 24h000000}
    
    const CLEAR = 0
    const UPDATE = 1
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        reset_conditioner external_reset_cond
        edge_detector edge_dt_p1_button_left (#RISE(1), #FALL(0))
        edge_detector edge_dt_p1_button_right (#RISE(1), #FALL(0))
        edge_detector edge_dt_p1_button_flip (#RISE(1), #FALL(0))
        edge_detector edge_dt_p2_button_left (#RISE(1), #FALL(0))
        edge_detector edge_dt_p2_button_right (#RISE(1), #FALL(0))
        edge_detector edge_dt_p2_button_flip (#RISE(1), #FALL(0))
        
        button_conditioner btn_cond_p1_button_left(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_p1_button_right(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_p1_button_flip(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_p2_button_left(#CLK_FREQ(CLK_FREQ)) 
        button_conditioner btn_cond_p2_button_right(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_p2_button_flip(#CLK_FREQ(CLK_FREQ)) 
        .rst(rst){
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            
            game_datapath game_datapath(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
            
            .clear(CLEAR) {
                .update(UPDATE) {
                    ws2812b_driver p1_chef_driver(#PIXEL_COUNT(CHEF_PIXEL_COUNT))
                    ws2812b_driver p2_chef_driver(#PIXEL_COUNT(CHEF_PIXEL_COUNT))
                    
                    ws2812b_driver lane_1_sushi_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_2_sushi_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_3_sushi_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_4_sushi_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    
                    ws2812b_driver lane_1_color_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_2_color_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_3_color_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                    ws2812b_driver lane_4_color_driver(#PIXEL_COUNT(SUSHI_PIXEL_COUNT))
                }
            }
            
        }
        
    }
    bin_to_dec timer_bin_to_dec_converter(#DIGITS(2))
    bin_to_dec p1_score_bin_to_dec_converter(#DIGITS(2))
    bin_to_dec p2_score_bin_to_dec_converter(#DIGITS(2))
    
    // ROM
    chef_rom p1_chef_rom
    chef_rom p2_chef_rom
    
    lane_rom lane_1_color_rom
    lane_rom lane_2_color_rom
    lane_rom lane_3_color_rom
    lane_rom lane_4_color_rom
    
    sushi_rom lane_1_sushi_rom
    sushi_rom lane_2_sushi_rom
    sushi_rom lane_3_sushi_rom
    sushi_rom lane_4_sushi_rom
    
    always {
        reset_cond.in = ~rst_n // input raw inverted reset signal
        external_reset_cond.in = external_reset_button // input raw external reset signal
        rst = reset_cond.out | external_reset_cond.out   // conditioned reset
        
        usb_tx = usb_rx        // loop serial port
        
        led = 8h00             // turn LEDs off
        
        io_led = 3x{{8h00}}    // turn LEDs off
        io_segment = 8hff          // turn segments off
        io_select = 4hf           // select no digits
        
        // P1
        btn_cond_p1_button_left.in = p1_button_left //to reduce the bouncing effects of your button
        btn_cond_p1_button_right.in = p1_button_right
        btn_cond_p1_button_flip.in = p1_button_flip
        
        edge_dt_p1_button_left.in = btn_cond_p1_button_left.out //get the edge of button press
        edge_dt_p1_button_right.in = btn_cond_p1_button_right.out
        edge_dt_p1_button_flip.in = btn_cond_p1_button_flip.out
        
        game_datapath.p1_button_left = edge_dt_p1_button_left.out
        game_datapath.p1_button_right = edge_dt_p1_button_right.out
        game_datapath.p1_button_flip = edge_dt_p1_button_flip.out
        
        // P2
        btn_cond_p2_button_left.in = p2_button_left //to reduce the bouncing effects of your button
        btn_cond_p2_button_right.in = p2_button_right
        btn_cond_p2_button_flip.in = p2_button_flip
        
        edge_dt_p2_button_left.in = btn_cond_p2_button_left.out //get the edge of button press
        edge_dt_p2_button_right.in = btn_cond_p2_button_right.out
        edge_dt_p2_button_flip.in = btn_cond_p2_button_flip.out
        
        game_datapath.p2_button_left = edge_dt_p2_button_left.out
        game_datapath.p2_button_right = edge_dt_p2_button_right.out
        game_datapath.p2_button_flip = edge_dt_p2_button_flip.out
        
        // WS2812B LED Connections
        // Chefs
        p1_chef_rom.pos = game_datapath.p1_chef_out[3:0]
        p1_chef_driver.color = COLOR_ENCODING[p1_chef_rom.out[$resize(p1_chef_driver.pixel_address, 4)]]
        p1_chef_data = p1_chef_driver.data
        
        p2_chef_rom.pos = game_datapath.p2_chef_out[3:0]
        p2_chef_driver.color = COLOR_ENCODING[p2_chef_rom.out[$resize(p2_chef_driver.pixel_address, 4)]]
        p2_chef_data = p2_chef_driver.data
        
        // Lane
        lane_1_color_rom.pos = game_datapath.lane_1_color_out[2:0]
        lane_1_color_driver.color = COLOR_ENCODING[lane_1_color_rom.out[$resize(lane_1_color_driver.pixel_address, 5)]]
        lane_1_color_data = lane_1_color_driver.data
        
        lane_2_color_rom.pos = game_datapath.lane_2_color_out[2:0]
        lane_2_color_driver.color = COLOR_ENCODING[lane_2_color_rom.out[$resize(lane_2_color_driver.pixel_address, 5)]]
        lane_2_color_data = lane_2_color_driver.data
        
        lane_3_color_rom.pos = game_datapath.lane_3_color_out[2:0]
        lane_3_color_driver.color = COLOR_ENCODING[lane_3_color_rom.out[$resize(lane_3_color_driver.pixel_address, 5)]]
        lane_3_color_data = lane_3_color_driver.data
        
        lane_4_color_rom.pos = game_datapath.lane_4_color_out[2:0]
        lane_4_color_driver.color = COLOR_ENCODING[lane_4_color_rom.out[$resize(lane_4_color_driver.pixel_address, 5)]]
        lane_4_color_data = lane_4_color_driver.data
        
        // Sushi
        lane_1_sushi_rom.pos = game_datapath.lane_1_sushi_out[4:0]
        lane_1_sushi_driver.color = COLOR_ENCODING[lane_1_sushi_rom.out[$resize(lane_1_sushi_driver.pixel_address, 5)]]
        lane_1_sushi_data = lane_1_sushi_driver.data
        
        lane_2_sushi_rom.pos = game_datapath.lane_2_sushi_out[4:0]
        lane_2_sushi_driver.color = COLOR_ENCODING[lane_2_sushi_rom.out[$resize(lane_2_sushi_driver.pixel_address, 5)]]
        lane_2_sushi_data = lane_2_sushi_driver.data
        
        lane_3_sushi_rom.pos = game_datapath.lane_3_sushi_out[4:0]
        lane_3_sushi_driver.color = COLOR_ENCODING[lane_3_sushi_rom.out[$resize(lane_3_sushi_driver.pixel_address, 5)]]
        lane_3_sushi_data = lane_3_sushi_driver.data
        
        lane_4_sushi_rom.pos = game_datapath.lane_4_sushi_out[4:0]
        lane_4_sushi_driver.color = COLOR_ENCODING[lane_4_sushi_rom.out[$resize(lane_4_sushi_driver.pixel_address, 5)]]
        lane_4_sushi_data = lane_4_sushi_driver.data
        
        //update 7segments
        seg.values = 6x{{4b0}} // default to all 0 first
        p1_score_bin_to_dec_converter.value = game_datapath.p1_score_out[6:0]
        p2_score_bin_to_dec_converter.value = game_datapath.p2_score_out[6:0]
        timer_bin_to_dec_converter.value = game_datapath.timer_out[6:0]
        
        // Timer | P1 Score | P2 Score
        seg.values = c{timer_bin_to_dec_converter.digits, p1_score_bin_to_dec_converter.digits, p2_score_bin_to_dec_converter.digits}
        
        /*
        io_led[2] = game_datapath.timer_out // timer
        io_led[0] = game_datapath.p1_score_out    // p1 score 
        io_led[1] = game_datapath.p2_score_out    // p2 score
        led[0] = game_datapath.slow_clock_out
        led[1] = game_datapath.variable_clock_out
        led[7:6] = game_datapath.p1_button_press_out
        led[5:4] = game_datapath.p2_button_press_out
        */        
        
        io_segment = ~seg.seg
        // io_select = ~seg.sel
        ext_select = seg.sel
        
    }
}